node {
    stage("Deploy") {
        currentBuild.displayName = SERVICE_VERSION
        withEnv(['SERVICE_VERSION=' + SERVICE_VERSION]) {
            def taskDefJson = sh returnStdout: true, script: '''
            cat cloud_formation/ecs-task-definition.json | sed 's/X_VERSION_X/'"$SERVICE_VERSION"'/' > build/taskDef.json
            '''
            printInfo("Registering a new task definition.")
            def createdTaskDefJson = sh returnStdout: true, script: '''
            aws ecs register-task-definition --cli-input-json file://$PWD/build/taskDef.json | grep "taskDefinitionArn"
            '''
            if (createdTaskDefJson == null || createdTaskDefJson.isEmpty()) {
                error("The task definition was not created. The deployment has failed.")
            }
            def taskDefArn = createdTaskDefJson.replace("\"taskDefinitionArn\": \"", "").replace("\",","")
            printInfo("The following task definition was created: " + taskDefArn)

            printInfo("Updated the ECS service with the new task definition.")

            def updatedServiceJson = sh returnStdout: true, script: """
            aws ecs update-service --cluster helloworld-cluster --service helloworld-svc-lb --task-definition ${taskDefArn}
            """
            // [TODO] Add version check
            if (updatedServiceJson == null || updatedServiceJson.isEmpty()) {
                error("The service definition was not updated. The deployment has failed.")
            }
        }
    }
}

def printInfo(text) {
    println "[ INFO ] --> " + text
}